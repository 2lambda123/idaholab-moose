/*
This pipeline builds a Docker image of MOOSE, runs the standard suite of tests,
and pushes the image to the registry prescribed by $DOCKER_TAG.  A second push 
is also done, with the tag suffix set to the commit hash of the MOOSE working 
tree.

For this all to work, $DOCKER_TAG must be prescribed as a pipeline 
parameter in Jenkins.  Additionally, $DISTRO_NAME and $DISTRO_VERSION need to
be defined, e.g. Ubuntu and 18.04, respectively.  Supported package managers 
are apt and yum.  Distros that should work include Ubuntu, Debian, CentOS, 
and Amazon Linux.
*/

pipeline {
    agent none
    
    stages {
        
        // Run 'docker build' on the Dockerfile in this repository
        // with args for core count and submodule commit hashes
        stage('Build Image')
        {
            agent any
            
            steps {
                sh '''
                # Setup for getting submodule commit hashes
                git submodule init
                e
                
                # Build MOOSE image with max cores and compatible submodules
                docker build \
                --build-arg DISTRO_NAME=$DISTRO_NAME \
                --build-arg DISTRO_VERSION=$DISTRO_VERSION \
                --build-arg MOOSE_JOBS=$(grep -c ^processor /proc/cpuinfo) \
                --build-arg PETSC_REV=$(sub_rev petsc) \
                --build-arg LIBMESH_REV=$(sub_rev libmesh) \
                -f "$WORKSPACE/docker_ci/Dockerfile" \
                -t $DOCKER_TAG .
                '''
            }
        }
        
        // Pipes output from MOOSE tests into a readable, accessible file
        stage('Run Tests')
        {
            agent any
            
            steps {
                sh '''
                # Run tests and pipe to accessible log file
                docker run $DOCKER_TAG /bin/bash -c \
                'cd test; ./run_tests --no-color' | tee test_results.log
                '''
            }
        }
        
        // Pushes given tag to registry and also for the current MOOSE commit
        stage('Push to Docker Registry')
        {
            agent any
            
            steps {
                sh '''
                # Get Docker repo prefix and tag string for current revision
                DOCKER_REPO=$(echo $DOCKER_TAG | awk -F ':' '{print $1}')
                DOCKER_COMMIT_TAG="$DOCKER_REPO:$(git rev-parse HEAD)"
                
                # Push given tag and also tag by commit
                docker push $DOCKER_TAG
                docker tag $DOCKER_TAG $DOCKER_COMMIT_TAG
                docker push $DOCKER_COMMIT_TAG
                
                # Clean up artifacts from the build
                docker system prune -f
                docker rmi $DOCKER_COMMIT_TAG
                '''
            }
        }
    }

    post {
        success {
            script {
                try {
                    // Want to display commit hash, distro, and build link
                    def COMMIT = sh 'git rev-parse HEAD'
                    def DISTRO_NAME = env.DISTRO_NAME
                    def BUILD_URL = env.BUILD_URL                    

                    // Send message build was successful
                    slackSend color: 'good', message: "Successful build of MOOSE rev ${COMMIT} on ${DISTRO_NAME} (<${BUILD_URL}|log>)"
                } catch (Exception e)
                {
                    echo "Slack notifications not configured." + e.toString() // Slack not required to build
                }
            }
        }

        failure {
            script {
                try {
                    // Want to display commit hash, distro, and build link
                    def COMMIT = sh 'git rev-parse HEAD'
                    def DISTRO_NAME = env.DISTRO_NAME
                    def BUILD_URL = env.BUILD_URL                    

                    // Send message build failed
                    slackSend color: 'danger', message: "Failed to build MOOSE rev ${COMMIT} on ${DISTRO_NAME} (<${BUILD_URL}|log>)"
                } catch (Exception e)
                {
                    echo "Slack notifications not configured." + e.toString() // Slack not required to build
                }
            }
        }

    }
}
