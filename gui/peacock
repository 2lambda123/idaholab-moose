#!/usr/bin/python
import os, sys, PyQt4, re, inspect
from PyQt4 import QtCore, QtGui

# Get the real path of peacock
if(os.path.islink(sys.argv[0])):
  pathname = os.path.dirname(os.path.realpath(sys.argv[0]))
else:
  pathname = os.path.dirname(sys.argv[0])
  pathname = os.path.abspath(pathname)

subdirs = ['gui','utils','vtk','mesh_info','plug_ins']

for subdir in subdirs:
  sys.path.append(pathname + '/' + subdir)

# Add the utilities/python_getpot directory
MOOSE_DIR = pathname + '/../moose'
#### See if MOOSE_DIR is already in the environment instead
if os.environ.has_key("MOOSE_DIR"):
  MOOSE_DIR = os.environ['MOOSE_DIR']
elif os.environ.has_key("MOOSE_DEV"):
  MOOSE_DIR = pathname + '/../devel/moose'

sys.path.append(MOOSE_DIR + '/tests')

from optparse import OptionParser

from InputFileWidget import *
from ExecuteWidget import *
from PostprocessorWidget import *
from ExodusResultRenderWidget import *

from ParseGetPot import readInputFile, GPNode

from PeacockTab import PeacockTab
from PeacockApplication import PeacockApplication

try:
  _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
  _fromUtf8 = lambda s: s

class UiBox(QtGui.QMainWindow):
  def __init__(self, options, args, app_path, qt_app, win_parent = None):
    QtGui.QMainWindow.__init__(self, win_parent)
    self.options = options
    self.app_path = os.path.abspath(app_path)
    self.application = getApplication(os.path.dirname(self.app_path), self)
    self.setWindowTitle('Peacock - ' + os.path.basename(self.app_path))
    self.tab_plugin_classes = findTabPlugins(os.path.dirname(self.app_path))
    self.qt_app = qt_app

    self.initUI()

    # Pull this window to the foreground
    self.raise_()
    
  def initUI(self):    
    self.main_ui = QtGui.QWidget(self)
    self.main_ui.setObjectName(_fromUtf8("Dialog"))
    self.main_layout = QtGui.QVBoxLayout()
    self.setCentralWidget(self.main_ui)

    self.tabs = self.application.tabs(self)
    
    self.tab_widget = QtGui.QTabWidget()

    for tab in self.tabs:
      self.tab_widget.addTab(tab, tab.name())

    for plugin_class in self.tab_plugin_classes:
      instance = plugin_class(self)
      self.tab_widget.addTab(instance, instance.name())
    
    self.main_layout.addWidget(self.tab_widget)
    
    self.main_ui.setLayout(self.main_layout)
    self.resize(700,600)
    
def recursiveFindExecutable(current_path, p):
  files = os.listdir(current_path)

  split = current_path.split('/')

  # if we're in the "problems" directory... hop over to this application's directory instead
  if len(split) > 2 and split[len(split)-2] == 'problems':
    return recursiveFindExecutable('/'.join(split[:len(split)-2]) + '/' + split[len(split)-1], p)
  
  for afile in files:
    if p.match(afile) and os.access(current_path+'/'+afile, os.X_OK):
      return current_path + '/' + afile

  up_one = os.path.dirname(current_path)

  if current_path != '/':
    return recursiveFindExecutable(up_one, p)

  return None  

def findExecutable(executable_option, method_option):
  if executable_option and os.path.exists(executable_option):
    return executable_option
  else:
    # search up directories until we find an executable, starting with the current directory

    method = 'opt' # Find the optimized binary by default

    if 'METHOD' in os.environ:
      method = os.environ['METHOD']

    if method_option:
      method = method_option
      
    p = re.compile('.+-'+method+'$')

    executable = recursiveFindExecutable(os.getcwd(), p)

    if not executable:
      print 'Executable not found!  Try specifying it using -e'
      sys.exit(1)

    return executable
  
def findTabPlugins(executable_path):
  
  for dirpath, dirnames, filenames in os.walk(executable_path+'/gui'):
    for file in filenames:
      if file[-2:] == 'py':
        module_name = file[:-3]
        sys.path.append(os.path.abspath(dirpath))

        # dynamically load the module
        __import__(module_name)

  return PeacockTab.__subclasses__()

''' Will return one class which is the "most leaf class" of the class passed in '''
def getLeafClass(classes):  
  leaf_class = None
  possible_leaf_class = None

  if len(classes):
    leaf_class = classes[-1]

  for aclass in classes:
    possible_leaf_class = getLeafClass(aclass.__subclasses__())

  if possible_leaf_class:
    return possible_leaf_class
  else:
    return leaf_class

def getApplication(executable_path, main_window):
    
  for dirpath, dirnames, filenames in os.walk(executable_path+'/gui'):
    for file in filenames:
      if file[-2:] == 'py':
        module_name = file[:-3]
        sys.path.append(os.path.abspath(dirpath))

        # dynamically load the module
        __import__(module_name)

  if len(PeacockApplication.__subclasses__()):
    return getLeafClass(PeacockApplication.__subclasses__())(main_window)
  else:
    return PeacockApplication(main_window)

if __name__ == '__main__':
  parser = OptionParser()
  parser.add_option("-e", "--executable", dest="executable",
                    help="The executable you would like to build an input file for.  If not supplied an executable will be searched for.  The searched for executable will default to the optimized version of the executable (if available).")

  parser.add_option("-i", "--input-file", dest="input_file",
                    help="An input file you would optionally like to open.")

  parser.add_option("-m", "--method", dest="method",
                    help="Pass either opt, dbg or devel.  Works the same as setting the $METHOD environment variable.")

  parser.add_option("-r", "--recache-syntax", action="store_true", dest="recache", help="Force a recache of the syntax for this executable. Use if you add new syntax or objects.")
  
  (options, args) = parser.parse_args()

  executable = findExecutable(options.executable, options.method)

  print 'Using Executable: ' + executable

  app = QtGui.QApplication(sys.argv)
  main_window = UiBox(options,args,executable,app)
  main_window.show()
  main_window.raise_()

  app.exec_()
