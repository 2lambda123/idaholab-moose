#!/usr/bin/env python
import os, sys, traceback

from contrib import *

from PySide import QtCore, QtGui

from base import *
from execute import *
from input import *

from code import InteractiveConsole
from StringIO import StringIO


# Adapted from
class PeacockInteractiveConsole(InteractiveConsole):

    def __init__(self, ui, locals=None):
        _InteractiveConsole.__init__(self,locals)
        self.ui = ui

    def write(self, data):
        if data:
            if data[-1] == '\n':
                data = data[:-1]
            self.ui.output.appendPlainText(data)

    def runsource(self, source, filename="<input>", symbol="single"):
        old_stdout = sys.stdout
        old_stderr = sys.stderr
        sys.stdout = sys.stderr = collector = StringIO()
        try:
            more = InteractiveConsole.runsource(self,source,filename,symbol)
        finally:
            if sys.stdout is collector:
                sys.stdout = old_stdout
            if sys.stderr is collector:
                sys.stderr = old_stderr
        self.write(collector.getvalue())
        return more





class PeacockConsoleWidget(QtGui.QWidget, MooseWidget):
  def __init__(self, **kwargs):
    QtGui.QWidget.__init__(self)
    MooseWidget.__init__(self, **kwargs)

    top_layout = self.addObject(QtGui.QVBoxLayout(), handle='ConsoleLayout')
    top_layout.setSpacing(0)

    self.addObject(QtGui.QPlainTextEdit(), handle='ConsoleOutput', parent='ConsoleLayout')

    self.addObject(QtGui.QHBoxLayout(), handle='ConsolePromptInputLayout', parent='ConsoleLayout')

    self.addObject(QtGui.QLineEdit(), handle='ConsolePrompt', parent='ConsolePromptInputLayout')
    self.addObject(QtGui.QLineEdit(), handle='ConsoleInput', parent='ConsolePromptInputLayout')

    self.setup()

  def _setupConsoleOutput(self, q_object):
    q_object.setReadOnly(True)
    q_object.setUndoRedoEnabled(False)
    q_object.setMaximumBlockCount(5000)
    q_object.setFrameStyle(QtGui.QFrame.NoFrame)
    q_object.setStyleSheet('color:white;background-color:black;')

    text_format = QtGui.QTextCharFormat()
    text_format.setFontFixedPitch(True)
    q_object.setCurrentCharFormat(text_format)


  def _setupConsolePrompt(self, q_object):
    q_object.setFrame(False)




#    text_format = QtGui.QTextCharFormat()
#    text_format.setFontFixedPitch(True)
#    q_object.setPlainText()

#    q_object.setTextColor('red') # = QtGui.QColor('red')
#    q_object.setTextBackgroundColor(QtGui.QColor('black'))
    q_object.setStyleSheet('color:white;background-color:black;')

    q_object.setFixedWidth(30)
#    q_object.setTextColor(QtGui.QColor('white'))
    q_object.setReadOnly(True)
    q_object.setText('>>> ')


  def _setupConsoleInput(self, q_object):
    q_object.setFrame(False)
    q_object.setStyleSheet('color:white;background-color:black;')


# A DEMO TABBED WIDGET
class PeacockTabWidget(QtGui.QWidget, MooseWidget):
  def __init__(self, **kwargs):
    QtGui.QWidget.__init__(self)
    MooseWidget.__init__(self, **kwargs)

    split = self.addObject(QtGui.QSplitter(), handle='MainVerticalSplit')

    # Create Tab layout
    tabs = self.addObject(QtGui.QTabWidget(), handle='PeacockTabs', parent='MainVerticalSplit')

    # Add the tabs to the layout
    self.addObject(InputWidget(**kwargs), handle='Input', parent='PeacockTabs')
  #  self.addObject(ExecuteWidget(**kwargs), handle='Execute', parent='PeacockTabs')
##
    self.addObject(PeacockConsoleWidget(**kwargs), handle='InteractiveConsole', parent='MainVerticalSplit')

    # Connect the signal 'button' from the InputWidget to the 'Run' callback of ExecuteWidget
#    self.connectSignal('button', 'Run')

#    self.object('Execute').info()

    self.setup()

  def _setupMainVerticalSplit(self, q_object):
    q_object.setOrientation(QtCore.Qt.Vertical)


if __name__ == '__main__':

  app  = QtGui.QApplication(sys.argv)
  main = QtGui.QMainWindow()
  menubar = QtGui.QMenuBar() # need parentless menu bar for OSX (see PySide QMainWindow.menuBar())
  main.setMenuBar(menubar)

  tabs = PeacockTabWidget(main=main, alignment='vertical', debug=True)




  tabs.show()

  sys.exit(app.exec_())
