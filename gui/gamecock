#!/usr/bin/env python
import os, sys, traceback, argparse

from PySide import QtCore, QtGui

from src.base import *
from src.execute import *
from src.input import *


# A DEMO TABBED WIDGET
class PeacockTabWidget(QtGui.QWidget, MooseWidget):
  def __init__(self, **kwargs):
    QtGui.QWidget.__init__(self)
    MooseWidget.__init__(self, **kwargs)

    split = self.addObject(QtGui.QSplitter(), handle='MainVerticalSplit')

    # Create Tab layout
    tabs = self.addObject(QtGui.QTabWidget(), handle='PeacockTabs', parent='MainVerticalSplit')

    # Add the tabs to the layout
#    self.addObject(InputWidget(**kwargs), handle='Input', parent='PeacockTabs')
    self.addObject(ExecuteWidget(**kwargs), handle='Execute', parent='PeacockTabs')

    # Add the Interactive console
    self.addObject(PeacockConsoleWidget(globals(), **kwargs), handle='InteractiveConsole', parent='MainVerticalSplit')

    # Connect the signal 'button' from the InputWidget to the 'Run' callback of ExecuteWidget
#    self.connectSignal('button', 'Run')
#    self.object('Execute').info()

    self.setup()

  def _setupMainVerticalSplit(self, q_object):
    q_object.setOrientation(QtCore.Qt.Vertical)

    h = self.property('screen_height')
    if self.property('debug'):
      q_object.setSizes([0.25*h, 0.25*h])
    else:
      q_object.setSizes([0.25*h, 0])


if __name__ == '__main__':

  # Command-line arguments
  parser = argparse.ArgumentParser(description="MOOSE GUI Application")

  # Set global parameter(s)
  parser.add_argument('-d', '--degbug', '--dbg', action='store_true', help='Run Peacock in debug mode')
  parser.add_argument('-e', '--executable', type=str, help='The program to execute')

  # Extract the command line options
  parser.parse_args('-d'.split())
  options = vars(parser.parse_args())

  # Create the GUI
  app  = QtGui.QApplication(sys.argv)
  main = QtGui.QMainWindow()
  menubar = QtGui.QMenuBar() # need parentless menu bar for OSX (see PySide QMainWindow.menuBar())
  main.setMenuBar(menubar)

  screen_rect = app.desktop().screenGeometry()
  width, height = screen_rect.width(), screen_rect.height()


  tabs = PeacockTabWidget(main=main, alignment='vertical', screen_width=width, screen_height=height, **options)

  tabs.show()

  sys.exit(app.exec_())
