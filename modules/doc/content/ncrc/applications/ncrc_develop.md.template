# {{ApplicationName}} Development

If you have already built {{ApplicationName}}, click on
[Building {{ApplicationName}}](ncrc_develop_{{ApplicationLower}}.md#build) again, (which will run
you through an update process when performed multiple times).

Proper development of {{ApplicationName}} requires a compiler, the {{bison}} repository, and
additional support libraries. The following instructions aim at preparing your machine or
environment for such development.

If you encounter any errors during any of these steps, you need to stop, and figure out a solution
before continuing. Please see our [Troubleshooting](help/troubleshooting.md) guide, which also
contains information on how to reach us in the event troubleshooting fails.

## Compiler Stack id=compiler

If you plan on using your personal machine we recommend using our Conda installation method. If
you are instead operating on one of our [!ac](INL) [!ac](HPC) clusters, you need only load a couple
of modules.

- If +Personal Machine+: Follow the [Conda Installation](installation/install_miniconda.md) instructions and then perform the following:

  ```bash
  mamba create -n moose moose-tools moose-libmesh
  ```

- If +[!ac](INL) [!ac](HPC) Sawtooth or Lemhi+ (required each time you log in):

  ```bash
  module load use.moose moose-dev
  ```

For those operating on other [!ac](HPC) clusters, you should contact that system's administrator,
and use their recommended compiler stack. It will need to satisfy to our
[minimum requirements](sqa/minimum_requirements.md).

!alert warning title=Conda packages may be suboptimal on HPC
Conda packages have the advantage of being able to work on most machines, but on [!ac](HPC)
clusters, this flexibility potentially comes at the cost of the optimizations developed by
[!ac](HPC) administrators.

## Cloning {{ApplicationName}} id=cloning

Instructions for obtaining a proper clone of {{ApplicationName}} can be found at
[NCRC/{{ApplicationName}}](ncrc/applications/ncrc_level4_{{ApplicationLower}}.md).

## Building {{ApplicationName}} id=build

Building {{ApplicationName}} begins with entering the directory, applying upstream changes, updating
your submodules and/or Conda packages, and finally running `make`. Before we begin, +remember these
two important warnings+:

!alert warning title=You updated Conda?
`Then you should also perform a submodule update`.

!alert warning title=You performed a submodule update?
`Then you should also perform a Conda update or rebuild PETSc/libMesh`.

The symmetry importance comes from our Conda packages and support libraries being version controlled
by and within the MOOSE repository. Updates to MOOSE (the `{{binary}}/moose` submodule) requires you
to stay on top of any Conda updates (if Personal Machine), or rebuilding PETSc and libMesh (if using
[!ac](HPC) resources).

### Updating {{ApplicationName}}

If this is your first time following these instructions there should be no updates. However, we will
perform an update to familiarize yourself with the entire process.

{{ApplicationName}} developers will expect them to have performed the following sections, whenever
someone says "I have updated {{ApplicationName}}".

```bash
cd ~/projects/{{binary}}
git fetch upstream
```

`git fetch upstream` updates your local references with that of the remote. It does not actually
modify any source files. It will return nothing if there is nothing new to update.

You need to know your upstream head branch. This will be the branch you will want to continuously
rebase against. That is, keeping your local {{binary}} repository up to date. The following command
will reveal the upstream head branch name:

```bash
git remote show upstream | grep "HEAD branch" | sed 's/.*: //'
```

Next, we will perform a `rebase` against the provided upstream branch name:

```bash
git rebase upstream/branch   # replace 'branch' with the discovered branch name
```

With {{binary}} updated, we can update its submodules.

### Updating Submodules

Most MOOSE-based applications require additional support libraries available in the form of
git submodules. To update submodules, perform the following:

```bash
cd ~/projects/{{binary}}
git submodule update --init
```

Remember the cyclical warnings ealier? By performing a submodule update, you should now perform
either a Conda update, or rebuilding PETSc/libMesh:

- If +Personal Machine (Conda)+:

  ```bash
  mamba activate moose
  mamba update --all
  ```

- If +[!ac](INL) [!ac](HPC) Sawtooth or Lemhi+:

  It will be necessary to build PETSc and libMesh using the supplied build scripts in
  `moose/scripts`. The time it takes to build both PETSc and libMesh can be hours:

  ```bash
  module load use.moose moose-dev    # a reminder to have these loaded
  export MOOSE_JOBS=6 METHODS=opt    # a reminder to set these
  cd ~/projects/{{binary}}/moose
  scripts/update_and_rebuild_petsc.sh
  scripts/update_and_rebuild_libmesh.sh
  ```

  !alert tip title=MOOSE_JOBS? METHODS?
  Go to [MOOSE Build System](application_development/build_system.md) for more information on
  available methods. MOOSE_JOBS controls how many cores to use during the use of our scripts.

With everything up to date, we should clean out any previous build of {{ApplicationName}}, and build
anew:

```bash
cd ~/projects/{{binary}}
make clobberall
make -j 6
```

`make clobberall` deletes the stale object/library files left behind from a previous build. While not
always necessary, please get into the habit of performing this operation before running `make`.

!include ncrc/applications/ncrc_runtest_{{ApplicationLower}}.md
