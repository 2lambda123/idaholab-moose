[Tests]
  design = 'INSFVTurbulentAdvection.md INSFVTurbulentDiffusion.md INSFVTKESourceSink.md INSFVTKEDSourceSink.md INSFVTurbulentViscosityWallFunction.md kEpsilonViscosityAux.md'
  issues = '#9007'
  [lid_driven_turb_std_wall]
    type = 'Exodiff'
    input = 'lid-driven-turb-std-wall.i'
    exodiff = 'lid-driven-turb-std-wall_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with standard wall functions.'
    abs_zero = 1e-6
  []
  [lid_driven_turb_std_wall_bulk]
    type = 'Exodiff'
    input = 'lid-driven-turb-std-wall.i'
    exodiff = 'bulk_treatement.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with standard wall functions using bulk wall treatement for mu_t.'
    cli_args = 'bulk_wall_treatment=true mu=1e-3 Outputs/file_base=bulk_treatement'
    abs_zero = 1e-6
  []
  [lid_driven_turb_non_eq_wall]
    type = 'Exodiff'
    input = 'lid-driven-turb-non-eq-wall.i'
    exodiff = 'lid-driven-turb-non-eq-wall_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with non-equilibrium wall functions.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_linear_wall]
    type = 'Exodiff'
    input = 'lid-driven-turb-linear-wall.i'
    exodiff = 'lid-driven-turb-linear-wall_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with linear wall functions.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_inc_wall]
    type = 'Exodiff'
    input = 'lid-driven-turb-inc-wall.i'
    exodiff = 'lid-driven-turb-inc-wall_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with incremental wall functions.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_no_wall_log_first_layer]
    type = 'Exodiff'
    input = 'lid-driven-turb-no-wall.i'
    exodiff = 'no_wall_log_layer.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with no wall treatement with the first cell on the logarithmic regime.'
    abs_zero = 1e-6
    cli_args = 'lid_velocity=10.0 Executioner/num_iterations=2000 Mesh/gen/nx=8 Mesh/gen/ny=8 Outputs/file_base=no_wall_log_layer'
    heavy = true
  []
  [lid_driven_turb_no_wall]
    type = 'Exodiff'
    input = 'lid-driven-turb-no-wall.i'
    exodiff = 'lid-driven-turb-no-wall_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with no wall treatement.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_non_eq_bulk]
    type = 'Exodiff'
    input = 'lid-driven-turb-non-eq-bulk.i'
    exodiff = 'lid-driven-turb-non-eq-bulk_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with non-equilibrium bulk treatement.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_energy]
    type = 'Exodiff'
    input = 'lid-driven-turb-energy.i'
    exodiff = 'lid-driven-turb-energy_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with transported energy.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_energy_wall]
    type = 'Exodiff'
    input = 'lid-driven-turb-energy-wall.i'
    exodiff = 'lid-driven-turb-energy-wall_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with temperature wall functions.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_energy_wall_linear]
    type = 'Exodiff'
    input = 'lid-driven-turb-energy-wall.i'
    exodiff = 'linear_temperature_wall_function.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with linearized temperature wall functions.'
    cli_args = 'FVBCs/T_hot/linearized_yplus=true FVBCs/T_cold/linearized_yplus=true Outputs/file_base=linear_temperature_wall_function'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_energy_wall_log]
    type = 'Exodiff'
    input = 'lid-driven-turb-energy-wall.i'
    exodiff = 'temperature_wall_function_log.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with temperature wall functions in the log-layer regime.'
    cli_args = 'lid_velocity=10.0 Mesh/gen/nx=8 Mesh/gen/ny=8 Outputs/file_base=temperature_wall_function_log'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_capped]
    type = 'Exodiff'
    input = 'lid-driven-turb-capped.i'
    exodiff = 'lid-driven-turb-capped_out.e'
    requirement = 'The system shall be able to solve turbulence in enclosures with capped production.'
    abs_zero = 1e-6
    heavy = true
  []
  [lid_driven_turb_std_wall_nonlinear]
    type = 'Exodiff'
    input = 'lid-driven-turb-std-wall-nonlinear.i'
    exodiff = 'lid-driven-turb-std-wall-nonlinear_out.e'
    requirement = 'The system shall be able to solve nonlinear turbulence in enclosures with standard wall functions.'
    abs_zero = 1e-6
    heavy = true
  []
  [channel_ERCOFTAC]
    type = 'Exodiff'
    input = 'channel_ERCOFTAC.i'
    exodiff = 'channel_ERCOFTAC_out.e'
    requirement = 'The system shall be able to solve standard ERCOFTAC turbulent channel.'
    abs_zero = 1e-6
  []
  [BFS_ERCOFTAC]
    type = 'Exodiff'
    input = 'BFS_ERCOFTAC.i'
    exodiff = 'BFS_ERCOFTAC_out.e'
    requirement = 'The system shall be able to solve standard ERCOFTAC backward facing step.'
    abs_zero = 1e-6
    heavy = true
  []
[]
