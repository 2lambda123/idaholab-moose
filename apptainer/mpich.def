{#- Required jinja arguments                                                                  -#}
{#- ARCH: The machine arch                                                                    -#}

{#- MOOSE_JOBS: Number of jobs to pass to the builds                                          -#}
{#- Optional jinja arguments                                                                  -#}
{#- ALTERNATE_FROM: Set an alternate from (currently supported: rocky9)                       -#}

{#- The minimum version of LLVM/Clang                                                         -#}
{%- set MIN_CLANG_VERSION = '10.0.1' -%}

{%- if ALTERNATE_FROM == "clang" or ALTERNATE_FROM == "clang-min" %}
Bootstrap: docker
{%- else %}
BootStrap: oras
{%- endif %}
{%- if ALTERNATE_FROM == "rocky9" %}
From: mooseharbor.hpc.inl.gov/moose-hpcbase/rocky9-{{ ARCH }}:9.0-0
{%- elif ALTERNATE_FROM == "clang" or ALTERNATE_FROM == "clang-min" %}
From: rockylinux:8
{%- elif ALTERNATE_FROM == "cuda" %}
From: mooseharbor.hpc.inl.gov/moose-hpcbase/rocky8-cuda-{{ ARCH }}:8.6-cuda11.4.0-0
{%- else %}
From: harbor.hpc.inl.gov/hpcbase/mpi_03:1.1.0
{%- endif %}

%environment
    # Fix locale warnings
    export LC_ALL=C

%post
{%- if ALTERNATE_FROM == "clang" or ALTERNATE_FROM == "clang-min" %}
    export MOOSE_MPICH_DIR=${MOOSE_MPICH_DIR:-"/opt/mpi/mpich-4.1.2"}
    export MOOSE_JOBS={{ MOOSE_JOBS or "1" }}
{%- if ALTERNATE_FROM == "clang-min" %}
    export MIN_CLANG_VERSION={{ MIN_CLANG_VERSION }}
{%- endif %}
{%- else %}
    export MOOSE_MPICH_DIR=${MOOSE_MPICH_DIR:-"/opt/mpi/mpich-3.4.3"}
    export MOOSE_OPENMPI_DIR=${MOOSE_OPENMPI_DIR:-"/opt/mpi/openmpi-4.1.5"}
{%- endif %}

    # Get the RHEL version
    RHEL_VERSION=$(awk -F'=' '/VERSION_ID/{ gsub(/"/,""); print $2}' /etc/os-release)

    # Prepare a temp directory
    TEMP_LOC=/root/build
    mkdir ${TEMP_LOC}

    # Enable power tools
    dnf install -y dnf-plugins-core
    if [[ $RHEL_VERSION = 9* ]]; then
        dnf config-manager --enable crb
    else
        dnf config-manager --set-enabled powertools
        dnf install -y redhat-lsb-core.x86_64
    fi
    # Additional installs
    dnf install -y vim tmux emacs wget rsync hostname python3-pyyaml python3-devel python39 \
                   cmake diffutils bison flex perl-IO-Compress perl-JSON perl-JSON-PP \
                   libtirpc libtirpc-devel zlib-devel patch patchutils epel-release file \
                   libpng libpng-devel unzip jq valgrind cppunit doxygen fftw-devel gsl-devel \
                   libtool autoconf automake cppunit-devel

{%- if ALTERNATE_FROM == "clang" %}

    # Installing system Clang, and its GCC GNU dependencies
    dnf install -y clang.x86_64 clang-devel.x86_64 clang-libs.x86_64 clang-tools-extra.x86_64 \
                   git-clang-format.x86_64 python3-clang.x86_64 clang-analyzer.noarch \
                   libomp.x86_64 lldb gcc-toolset-12

    # Set alternative gcc-toolchain paths required by system Clang
    export PATH=/opt/rh/gcc-toolset-12/root/bin:${PATH}
    export LD_LIBRARY_PATH=/opt/rh/gcc-toolset-12/root/lib:/opt/rh/gcc-toolset-12/root/lib64:${LD_LIBRARY_PATH}

{%- elif ALTERNATE_FROM == "clang-min" %}

    # Installing additional packages necessary to build Clang from source
    dnf groupinstall -y 'Development Tools'
    dnf install -y gcc-toolset-10 git

    # Set alternative gcc-toolchain paths required by system Clang
    export PATH=/opt/rh/gcc-toolset-10/root/bin:${PATH}
    export LD_LIBRARY_PATH=/opt/rh/gcc-toolset-10/root/lib:/opt/rh/gcc-toolset-10/root/lib64:${LD_LIBRARY_PATH}
{%- endif %}

    # After epel-release
    dnf install -y glpk-devel patchelf lcov

    # Make python default to python3
    if [[ $RHEL_VERSION = 9* ]]; then
        alternatives --install /usr/bin/python python /usr/bin/python3 0
    else
        alternatives --set python /usr/bin/python3
    fi

    # Allow a custom initialization routine if the following files exist at /
    touch ${SINGULARITY_ROOTFS}/none
    cat <<'EOF' >> ${SINGULARITY_ROOTFS}/.singularity.d/env/90-environment.sh
# If discovered, use these files as initialization routines
if [ -f /init_env ]; then
  file="/init_env"
else
  file="/none"
fi
action="${0##*/}"
case "${action}" in
shell)
    if [ "${SINGULARITY_SHELL:-}" = "/bin/bash" ]; then
        set -- --noprofile --rcfile $file
    elif test -z "${SINGULARITY_SHELL:-}"; then
        export SINGULARITY_SHELL=/bin/bash
        set -- --noprofile --rcfile $file
    fi
    ;;
exec)
    export BASH_ENV="$file"
    set -- /bin/bash --noprofile --rcfile $file -c "$*"
    ;;
run)
    set -- /bin/bash --noprofile --rcfile $file
esac
EOF

    # Create a pretty prompt (ensure last item sourced)
    cat <<'EOF' > ${SINGULARITY_ROOTFS}/.singularity.d/env/99-zzz_prompt.sh
if [ -n "${CUSTOM_PROMPT}" ]; then
    PS1=${CUSTOM_PROMPT}
else
    PS1="\[\033[1;34m\][`basename ${APPTAINER_NAME:-$SINGULARITY_NAME} .sif`]\[\033[1;32m\][\w]\[\033[0m\]> "
fi
EOF

    # We need git lfs
    mkdir ${TEMP_LOC}/gitlfs
    cd ${TEMP_LOC}/gitlfs
    curl -L -O https://github.com/git-lfs/git-lfs/releases/download/v3.2.0/git-lfs-linux-amd64-v3.2.0.tar.gz
    tar -xf git-lfs-linux-amd64-v3.2.0.tar.gz
    cd git-lfs-3.2.0
    ./install.sh

{%- if ALTERNATE_FROM == "clang-min" %}

    # Build minimum Clang from source; MIN_CLANG_VERSION={{ MIN_CLANG_VERSION }}
    cd ${TEMP_LOC}
    git clone --depth 1 --branch llvmorg-${MIN_CLANG_VERSION} https://github.com/llvm/llvm-project
    cd llvm-project
    mkdir llvm-build
    cd llvm-build
    cmake ../llvm -G 'Unix Makefiles' \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra;compiler-rt;libcxx;libcxxabi;libunwind;openmp;lldb' \
      -DCMAKE_INSTALL_PREFIX=/opt/llvm-${MIN_CLANG_VERSION}  \
      -DCMAKE_INSTALL_RPATH:STRING=/opt/llvm-${MIN_CLANG_VERSION}/lib \
      -DCMAKE_INSTALL_NAME_DIR:STRING=/opt/llvm-${MIN_CLANG_VERSION}/lib \
      -DCMAKE_BUILD_WITH_INSTALL_RPATH=1 \
      -DGCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-10/root \
      -DCMAKE_C_COMPILER=/opt/rh/gcc-toolset-10/root/bin/gcc \
      -DCMAKE_CXX_COMPILER=/opt/rh/gcc-toolset-10/root/bin/g++ \
      -DCMAKE_CXX_LINK_FLAGS="-L/opt/rh/gcc-toolset-10/root/lib -Wl,-rpath,/opt/rh/gcc-toolset-10/root/lib"
    make -j ${MOOSE_JOBS}
    make install -j ${MOOSE_JOBS}

    # Use Clang {{ MIN_CLANG_VERSION }}
    export PATH=/opt/llvm-${MIN_CLANG_VERSION}/bin:${PATH}
    export LD_LIBRARY_PATH=/opt/llvm-${MIN_CLANG_VERSION}/lib:${LD_LIBRARY_PATH}
{%- endif %}

{%- if ALTERNATE_FROM == "clang" or ALTERNATE_FROM == "clang-min" %}

    # Build and Install MPICH using Clang
    mkdir ${TEMP_LOC}/mpich
    cd ${TEMP_LOC}/mpich
    curl -L -O http://www.mpich.org/static/downloads/4.1.2/mpich-4.1.2.tar.gz
    tar -xf mpich-4.1.2.tar.gz
    mkdir mpich-4.1.2/build
    cd mpich-4.1.2/build
    export CC=clang CXX=clang++ FC=gfortran F90=gfortran F77=gfortran
    ../configure --prefix=${MOOSE_MPICH_DIR} \
      --enable-shared \
      --enable-fast=O2 \
      --enable-debuginfo \
      --enable-two-level-namespace \
      CC=clang \
      CXX=clang++ \
      FC=gfortran \
      F77=gfortran \
      F90=gfortan \
      CFLAGS='' \
      CXXFLAGS='' \
      FFLAGS='-fallow-argument-mismatch' \
      FCFLAGS='-fallow-argument-mismatch' \
      F90FLAGS='' \
      F77FLAGS=''
    make -j ${MOOSE_JOBS}
    make install -j ${MOOSE_JOBS}
{%- endif %}

    # Basic script for setting mpich environment
    USE_MPI_SCRIPT='export LD_LIBRARY_PATH=${MOOSE_MPI_DIR}/lib:${LD_LIBRARY_PATH}
export MANPATH=${MOOSE_MPI_DIR}/share/man:${MANPATH}
export PATH=${MOOSE_MPI_DIR}/bin:${PATH}
{%- if ALTERNATE_FROM == "clang" %}
export PATH=/opt/rh/gcc-toolset-12/root/bin:${PATH}
export LD_LIBRARY_PATH=/opt/rh/gcc-toolset-12/root/lib:/opt/rh/gcc-toolset-12/root/lib64:${LD_LIBRARY_PATH}
{%- endif %}
{%- if ALTERNATE_FROM == "clang-min" %}
export PATH=/opt/rh/gcc-toolset-10/root/bin:${PATH}
export LD_LIBRARY_PATH=/opt/rh/gcc-toolset-10/root/lib:/opt/rh/gcc-toolset-10/root/lib64:${LD_LIBRARY_PATH}
export PATH=/opt/llvm-{{ MIN_CLANG_VERSION }}/bin:${PATH}
export LD_LIBRARY_PATH=/opt/llvm-{{ MIN_CLANG_VERSION }}/lib:${LD_LIBRARY_PATH}
{%- endif %}
export CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77'

    # Add script for loading mpich environment
    cat << EOF > /opt/mpi/use-mpich
#!/bin/bash
export MOOSE_MPI_DIR=${MOOSE_MPICH_DIR}
${USE_MPI_SCRIPT}
EOF

    # Add script for loading openmpi environment
    cat << EOF > /opt/mpi/use-openmpi
#!/bin/bash
export MOOSE_MPI_DIR=${MOOSE_OPENMPI_DIR}
${USE_MPI_SCRIPT}
EOF

    # Clean Up
    rm -rf ${TEMP_LOC}
    dnf clean all
