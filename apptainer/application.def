BootStrap: <PROTOCOL>
From: <LOCATION>

%files
    # Populate SSH Keys if necessary
   <KEY>

%post
    # By default, lets not print every command
    set +x

    # Create container regardless of failure for application specific tasks
    # We want to print this important information near to the beginning of the build
    # as possible. We will `set +e` later
    if [ -n "<CIVET_STEP_ALLOWED_TO_FAIL>" ] || [ -n "<MOOSE_SKIP_DOCS>" ]; then
        printf "##############\n"
        if [ "<CIVET_STEP_ALLOWED_TO_FAIL>" == "TRUE" ]; then
            printf "CIVET_STEP_ALLOWED_TO_FAIL = TRUE\n"
            printf "\033[0;31mNOTICE: WE WILL NOT EXIT ON ERROR UNLESS SPECIFICALLY TOLD TO DO SO\033[0m\n"
        fi

        # Leave commented, as we should someday come back around and support it logically
        if [ "<MOOSE_SKIP_DOCS>" == "TRUE" ]; then
            printf "MOOSE_SKIP_DOCS = TRUE\n"
            printf "\033[0;31mNOTICE: NO DOCUMENTATION WILL BE BUILT\033[0m\n"
            export MOOSE_SKIP_DOCS=True
        fi
        printf "\n##############"
    fi

    # Fix permissions during for `make install`
    umask 022

    # Prepare a temp directory
    export TEMP_LOC=`mktemp -d /tmp/_apptainer.XXXXX`
    mkdir -p ${TEMP_LOC}/tmp
    cd ${TEMP_LOC} || exit 1

    # Install Mamba (needed for correct python version when building documentation)
    printf "Installing Mamba quietly...\n"
    curl -L -O https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh
    sh Mambaforge-Linux-x86_64.sh -b -p /usr/local/mambaforge3 &>/dev/null
    export PATH=/usr/local/mambaforge3/bin:$PATH
    mamba install -y python=3.10 &>/dev/null
    conda config --add channels https://conda.software.inl.gov/public
    mamba create -y -n moose python=3.10 moose-tools &>/dev/null
    source activate /usr/local/mambaforge3/envs/moose

    # Apply SSH Key to GIT command
    if [ -n "<KEY>" ]; then
        export GIT_SSH_COMMAND="ssh -i $(echo '<KEY>' | cut -d\  -f2) -o 'StrictHostKeyChecking no'"
    fi

    # Fetch repository
    git clone <CIVET_HEAD_SSH_URL>
    cd $(basename <CIVET_HEAD_SSH_URL> .git)
    git checkout <CIVET_HEAD_REF>
    git submodule update --init
    if [ -n "<RECURSIVE_SUBMODULES>" ]; then
        git submodule update --init --recursive <RECURSIVE_SUBMODULES>
    fi

    # Now start allowing failures
    if [ "<CIVET_STEP_ALLOWED_TO_FAIL>" == "TRUE" ]; then
        set +e
    fi

    export MOOSE_JOBS=${MOOSE_JOBS:-12}
    echo "MOOSE_JOBS: ${MOOSE_JOBS}"
    export APPLICATION=<APPLICATION>
    export MOOSE_PREFIX=/usr/local/${APPLICATION}

    if [ "<APPLICATION>" == "moose" ]; then
        export APPLICATION='combined'
    else
        cd moose
    fi
    ./configure --prefix=${MOOSE_PREFIX}
    if [ "<APPLICATION>" == "moose" ]; then
        cd modules
    else
        cd ../
    fi

    # Make, Install
    make -j ${MOOSE_JOBS}
    make install -j ${MOOSE_JOBS}

    # Test Application
    ./run_tests -j ${MOOSE_JOBS}

    # Test make install copy-inputs
    export PATH=/usr/local/${APPLICATION}/bin:$PATH
    cd ${TEMP_LOC}/tmp
    ${APPLICATION}-opt --copy-inputs tests
    cd ${APPLICATION}/tests
    ${APPLICATION}-opt --run -j ${MOOSE_JOBS} -t

    # Error on a failure for remaining commands
    if [ "<CIVET_STEP_ALLOWED_TO_FAIL>" == "TRUE" ]; then
        printf "FAILURES ARE NO LONGER ALLOWED\n\n"
    fi
    set -e +x

    # Fix permissions for installed application
    chmod -R o=u-w,g=u-w /usr/local/${APPLICATION}

    # Create HERD Bash Profile
    cat <<'EOF' > ${SINGULARITY_ROOTFS}/.singularity.d/env/99-herd_profile.sh
# Conda/Mamba was necessary for MOOSE documentation
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/local/mambaforge3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/local/mambaforge3/etc/profile.d/conda.sh" ]; then
        . "/usr/local/mambaforge3/etc/profile.d/conda.sh"
    else
        export PATH="/usr/local/mambaforge3/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/usr/local/mambaforge3/etc/profile.d/mamba.sh" ]; then
    . "/usr/local/mambaforge3/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<

# Path to MOOSE applications
if [ ! -f ~/.suppress_container_message ]; then
    printf "Documentation is available at the following locations respectfully:\n\n"
fi
# Support multiple application for furture use
moose_apps=(<APPLICATION>)
for app in "${moose_apps[@]}"; do
    MOOSE_APPPATH+=":/usr/local/${app}/bin"
    export ${app^^}_DOCS="/usr/local/${app}/share/${app}/doc"
    if [ ! -f ~/.suppress_container_message ]; then
        printf "\t\$${app^^}_DOCS\n"
    fi
done
if [ ! -f ~/.suppress_container_message ]; then
    printf "\nMore content (assessment, tutorials, problems, examples) can be\nfound in the parent directory for the above supplied locations.\n"
    printf "\nYou can suppress this message by creating the following file:\n\n\ttouch ~/.suppress_container_message\n\n"
fi
export PATH=${MOOSE_APPPATH}:$PATH
EOF

    # Clean Up
    conda deactivate
    conda env remove -n moose
    cd /usr/local/mambaforge3/pkgs
    rm -rf *
    touch urls.txt urls
    cd /usr/local/${APPLICATION}/
    find . -type f -name "__pycache__" -exec rm -rf {} \;
    rm -rf ${TEMP_LOC}
    rm -rf /root/.ssh
    # Erase Key: <'KEY'> (if set). Error if we cannot for safety.
    if [ -n "<KEY>" ]; then
        rm -f "$(echo '<KEY>' | cut -d\  -f2)"
        if [ -f "$(echo '<KEY>' | cut -d\  -f2)" ]; then exit 1; fi
    fi
    if [ -d /root/.ssh ]; then exit 1; fi
