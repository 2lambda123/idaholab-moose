BootStrap: <PROTOCOL>
From: <LOCATION>

%files
    # NOTE: Do not include paths to MOOSE based repositories.
    #       Too many repos are including broken symlinks, which
    #       apptainer cannot work around. Therefor the repo must
    #       be cloned during %post.

    # Populate SSH Keys if necessary
    <KEY>

%environment
    # libMesh
    export LIBMESH_DIR=/usr/local/libmesh

%post
    # By default, lets not print every command
    set +x

    # Apply SSH Key to GIT command
    if [ -n "<KEY>" ]; then
        export GIT_SSH_COMMAND="ssh -i $(echo '<KEY>' | cut -d\  -f2) -o StrictHostKeyChecking=no"
    fi

    # Prepare a temp directory
    export TEMP_LOC=`mktemp -d /tmp/_apptainer.XXXXX`
    mkdir -p ${TEMP_LOC}/tmp
    cd ${TEMP_LOC} || exit 1

    # Fetch repository, submodule libMesh (recursively)
    git clone <CIVET_HEAD_SSH_URL>
    cd $(basename <CIVET_HEAD_SSH_URL> .git)
    git checkout <CIVET_HEAD_REF>
    git submodule update --init --recursive libmesh

    # Build libMesh
    umask 022
    export LIBMESH_DIR=/usr/local/libmesh
    # Hardcode optmized only
    export MOOSE_JOBS=${MOOSE_JOBS:-12}
    export METHODS='opt'
    cd scripts
    echo -e "JOBS: $MOOSE_JOBS\n METHODS: ${METHODS}"
    ./update_and_rebuild_libmesh.sh

    # Fix possibly bad permissions
    chmod -R o=u-w,g=u-w /usr/local/libmesh

    # Clean Up
    # Remove any keys somehow populated in root's home
    rm -rf /root/.ssh
    # Verify that root keys/configs/etc no longer exists
    if [ -d /root/.ssh ]; then exit 1; fi

    # Erase Key: <'KEY'> (if set)
    if [ -n "<KEY>" ]; then
        rm -f "$(echo '<KEY>' | cut -d\  -f2)"
    fi
    rm -rf ${TEMP_LOC}
