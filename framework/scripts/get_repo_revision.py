#!/usr/bin/python

# This script finds the current repository revision base on the log file
# It currently understands both local git-svn and svn repositories

import subprocess, os, sys, re

def findRepoRevision(moose_dir):
  apps_file = '.build_apps'
  revision = ""

  # Locate the .build_apps file
  found_it = False
  apps_dir = os.getcwd() + "/"
  for i in range(4):
    apps_dir += "../"
    if os.path.exists(apps_dir + apps_file):
      found_it = True
      break
  if not found_it:
    # Unable to find .build_apps so we'll just give up
    return revision  # blank string

  # At this point apps_dir should contain the root of the repository

  # See if this is an SVN checkout
  regex = ''
  if os.path.exists(apps_dir + '.git'):
    command = 'git svn log --limit 1'
    regex = re.compile(r'r(\d+)')
  elif os.path.exists(apps_dir + '.svn'):
    command = 'svnversion .'
    regex = re.compile(r'(\d+)\w*$')
  else:
    return revision  # blank string

  saved_dir = os.getcwd()
  # Change current working directory (this is necessary for braindead SVN)
  os.chdir(apps_dir)
  # Get the revision from the log
  p = subprocess.Popen([command], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
  buffer = p.communicate()[0]
  # Restore current working directory
  os.chdir(saved_dir)

  # find the revision
  m = regex.search(buffer)
  if m != None:
    revision = m.group(1)
  return revision


def writeRevision(moose_dir, revision):
  # see if the revision is different
  revision_file = moose_dir + '/include/base/HerdRevision.h'

  revision_changed = True
  if os.path.exists(revision_file):
    f = open(revision_file, "r")
    buffer = f.read()

    m = re.search(r'(\d+)', buffer)
    existing_revision = ""
    if m != None:
      existing_revision = m.group(1)

    if revision == existing_revision:
      revision_changed = False
    f.close()

  if revision_changed:
    f = open(revision_file, "w")
    f.write("/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */\n\n")

    # We have to have something listed as a revision if we didn't find one
    if revision == "":
      revision = '"N/A"';
    f.write("#ifndef HERDREVISION_H\n#define HERDREVISION_H\n\n#define HERD_REVISION " + revision + "\n\n#endif //HERDREVISION_H")
    f.close()

# Entry point
if len(sys.argv) == 2:
  moose_dir = sys.argv[1]
  revision = findRepoRevision(moose_dir)

  writeRevision(moose_dir, revision)
