#!/usr/bin/env python

# Import the required packages
import os, sys, argparse, socket, time, subprocess

# Import the distcc API objexts
from distcc import *

## Get the make directory
def getMakeDirectory():

  # Locate the Makefile
  make_dir = None
  dir = os.getcwd()
  while dir != os.getenv('HOME'):
    if os.path.exists(os.path.join(dir, 'Makefile')):
      make_dir = dir
      break
    dir = os.path.realpath(os.path.join(dir, '..'))

  # Exit if 'Makefile' was not located
  if make_dir == None:
    print 'Error: No Makefile located'
    sys.exit()

  return make_dir


## Set the DISTCC_HOSTS environment and run 'make'
#  @param distcc_hosts The complete DISTCC_HOSTS enviornmental variable (from MachineWarehouse::getHosts)
#  @param jobs The number of jobs to run 'make' with (from MachineWarehouse::getHosts)
#  @param kwargs Optional keyword/value pairings
#
#  Keyword/Value Options:
#    dbg = True | {False}   - Sets build method to debug (takes priority over opt and oprof)
#    opt = True | {False}   - Sets build method to opt (take prioirity over oprof)
#    oprof = {True} | False - Set build method to oprof (default)
#    quiet = True | {False} - Disables the distcc verbose output
#    timeout = <number>     - Length of time before distcc assumes failure (default 30s)
#    cwd = str              - Directory to run make, if excluded getMakeDirectory() is called
def runMake(distcc_hosts, jobs, **kwargs):

  # Set the build type
  if kwargs.pop('dbg', False):
    os.environ['METHOD'] = 'dbg'
  elif kwargs.pop('opt', False):
    os.environ['METHOD'] = 'opt'
  elif kwargs.pop('oprof', False):
    os.environ['METHOD'] = 'oprof'

  # Set the DISTCC_HOSTS environmental variable
  os.environ['DISTCC_HOSTS'] = distcc_hosts

  # Set the verboseness of distcc
  if kwargs.pop('quiet', False):
    os.environ['DISTCC_VERBOSE'] = '0'

  # Set distcc timeout
  os.environ['DISTCC_IO_TIMEOUT'] = str(kwargs.pop('timeout', 30))

  # Build the make command
  make = ['make', '-j', str(jobs)]
  make.extend(make_args)

  # Get the make directory
  make_dir = kwargs.pop('cwd', None)
  if make_dir == None:
    make_dir = getMakeDirectory()

  # Run make
  strt = time.clock()
  sub = subprocess.Popen(make, cwd=make_dir)

  # Wait for process to terminate
  while sub.poll() == None:
    pass

  # Print the make durration
  t = time.clock() - strt
  print 'Make Execution Time: ' + str(t) + ' sec.'


## Function for parsing command line arguments
def parseArguments(args=None):

  # Create the argument parser
  parser = argparse.ArgumentParser(description='dmake: A front-end tool for distcc\n')

  # Flag options
  gen = parser.add_argument_group('General Options')
  gen.add_argument('--summary', '-s', action='store_true', help='Show distribution summary (no make)')
  gen.add_argument('--quiet', '-q', action='store_true', help='Do not print compile errors/warnings')
  gen.add_argument('--local', '-l', action='store_true', help='Run make locally with all possible threads')
  gen.add_argument('--verbose', '-v', action='store_true', help='Show a detailed summary')
  gen.add_argument('--refresh', '-r', action='store_true', help='Force a refresh of the stored DISTCC_HOSTS cache')
  gen.add_argument('--description', nargs=1, metavar='"Description"', type=str, help='Add/change description for your machine.')

  # Make related options
  make = parser.add_argument_group('Compiler Options')
  make.add_argument('--jobs', '-j', type=int, help='Override the automatic job count settings')
  make.add_argument('--max', '-m',  action='store_true', help='Use maximum jobs available (plese be nice)')
  make.add_argument('--dbg', '-d', action='store_true', help='Build in debug mode')
  make.add_argument('--oprof', '-p', action='store_true', help='Build in oprof mode')
  make.add_argument('--opt', '-o', action='store_true', help='Build in opt mode')
  make.add_argument('--benchmark','-b', action='store_true', help='Run \'make cleanall\' and \'make\' in the current directory')

  # DISTCC_HOSTS Options
  hosts = parser.add_argument_group('DISTCC_HOST Options')
  hosts.add_argument('--localhost', type=int, help='Override the automatic setting for the number of localhost processors to utilize')
  hosts.add_argument('--localslots', type=int, help='Override the automatic setting for the number of local compile slots')
  hosts.add_argument('--localslots_cpp', type=int, help='Override the automatic setting for the number of local preprocessor slots')

  # Distcc options
  distcc = parser.add_argument_group('Advanced distcc Options')
  distcc.add_argument('--timeout', type=int, default=30, help='Override the default for DISTCC_IO_TIMEOUT (default: %(default)d sec.)')
  distcc.add_argument('--disable', nargs='+', help='Remove username/hostname/IP(s) from your DISTCC_HOSTS list')
  distcc.add_argument('--enable','-e', action='store_true', help='Enable the previousily disabled machines')
  distcc.add_argument('--allow_off_network', action='store_true', help='Allow for off INL network to use distcc pool')

  # Options that do not run make
  daemon = parser.add_argument_group('Distcc Daemon Options')
  daemon.add_argument('--daemon', action='store_true', help='Launch distcc as a daemon (no make)')
  daemon.add_argument('--kill', action='store_true', help='Kill distcc as a daemon (no make)')
  daemon.add_argument('--no-daemon', action='store_true', help='Do not launch any daemon processes and kill existing')
  daemon.add_argument('--dedicated', action='store_true', help='Identify this machine as a dedicated build box')
  daemon.add_argument('--allow', nargs='+', metavar=['hostname'], help='Temporarly add hostname/IP to your allow list')

  # Advanced options
  misc = parser.add_argument_group('Misc. Options')
  misc.add_argument('--clean', '-c', action='store_true', help='Clean up .dmake and .dmake_hosts files')
  misc.add_argument('--buck', action='store_true', help='Use the distcc file generator from buck')
  misc.add_argument('--serial', action='store_true', help='Disable the parallel creating of the Machine objects; this also will print the information for each object created for debuggin purposes')

  # Allow flags to be run together
  parser.parse_args('-mqvlrbdpoce'.split())

  # Parse the input and return the options
  (options, other_args) = parser.parse_known_args()

  # Set the output to be verbose and refresh to be true if --summary is used
  if options.summary:
    options.verbose = True
    options.refresh = True

  # Return the options
  return (options, other_args)


## Helper function to extract options for **kwargs input
def subOptions(options, *args):
  output = dict()
  opt = vars(options)
  for key in args:
    output[key] = opt[key]
  return output


## Main function
if __name__ == "__main__":

  # Extract the options from the command line
  (options, make_args) = parseArguments()

  # Create the MachineWarehouse object, limit to the known networks
  opt = subOptions(options, 'allow', 'allow_off_network')
  warehouse = MachineWarehouse(restrict=['141','134'], **opt)

  # Create the DmakeRC object
  opt = subOptions(options, 'buck', 'dedicated', 'description', 'clean', 'disable', 'enable')
  dmakerc = DmakeRC(warehouse.master, **opt)

  # Create the DistccDaemon object
  daemon = DistccDaemon(warehouse.master, dedicated=options.dedicated)

  # Kill the daemons
  if options.kill or options.no_daemon:
    daemon.kill()

  # Start the daemons
  if options.refresh or (options.daemon and not options.no_daemon):
    warehouse.buildMachines(dmakerc.get('HOST_LINES'))
    daemon.start(warehouse.machines)

  # Exit if running basic daemon options
  if options.daemon or options.kill:
    sys.exit()

  # Get the hosts and jobs
  if dmakerc.needUpdate() or options.refresh:
    opt = subOptions(options,'max','localhost','localslots','localslots_cpp')
    distcc_hosts, jobs = warehouse.getHosts(dmakerc.get('HOST_LINES'), disable=dmakerc.get('DISABLE'), **opt)
    dmakerc.set(DISTCC_HOSTS=distcc_hosts, JOBS=jobs, write=(not options.max))

  else:
    distcc_hosts = dmakerc.get("DISTCC_HOSTS")
    jobs = dmakerc.get("JOBS")
    print 'Using cached DISTCC_HOSTS, use --refresh to rebuild'

  # Display the  output
  outputer = MachineOutput(warehouse)
  outputer.display(distcc_hosts, jobs, verbose=options.verbose, make_args=make_args)

  # --summary does not run any commands, so exit
  if options.summary:
    sys.exit()

  # Get the make directory
  make_dir = getMakeDirectory()

  # Run 'make cleanall' if the benchmark options is given
  if options.benchmark:
    sub = subprocess.Popen(['make', 'cleanall'], cwd=make_dir)
    sub.wait()

  # Run Make
  opt = subOptions(options,'timeout','quiet','dbg','opt','oprof')
  runMake(distcc_hosts, jobs, make_args=make_args, cwd=make_dir, **opt)
