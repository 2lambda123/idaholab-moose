# This file contains common MOOSE application settings
# Note: MOOSE applications are assumed to reside in peer directories relative to MOOSE and optionally ELK.
#       This can be overridden by using environment variables (MOOSE_DIR and/or ELK_DIR)

# include the library options determined by configure.  This will
# set the variables INCLUDE and LIBS that we will need to build and
# link with the library.
include $(LIBMESH_DIR)/Make.common

libmesh_CXXFLAGS     += -MD
libmesh_CFLAGS       += -MD

# Location of the MOOSE Includes and Library
moose_DIRS	:= $(shell find $(MOOSE_DIR)/include -type d -not -path "*/.svn*")
moose_INCLUDE 	:= $(foreach i, $(moose_DIRS), -I$(i))

moose_LIB := $(MOOSE_DIR)/libmoose-$(METHOD)$(static_libext)
ifeq ($(enable-shared),yes)
	moose_LIB := $(MOOSE_DIR)/libmoose-$(METHOD)$(shared_libext)
endif

# Location of ELK Includes and Library
ifeq ($(ENABLE_ELK),yes)
	ELK_DIR ?= $(shell pwd)/../elk

	elk_DIRS    := $(shell find $(ELK_DIR)/include -type d -not -path "*/.svn*")
	elk_INCLUDE := $(foreach i, $(elk_DIRS), -I$(i))

	elk_LIB := $(ELK_DIR)/libelk-$(METHOD)$(static_libext)
	ifeq ($(enable-shared),yes)
		elk_LIB := $(ELK_DIR)/libelk-$(METHOD)$(shared_libext)
	endif
endif

libmesh_INCLUDE += $(moose_INCLUDE) $(elk_INCLUDE)
libmesh_LIBS := $(elk_LIB) $(moose_LIB) $(libmesh_LIBS) -Wl,-rpath,$(MOOSE_DIR) 

ifeq ($(ENABLE_ELK),yes)
	libmesh_LIBS += -Wl,-rpath,$(ELK_DIR)
endif

# Fortran baggage
mpif77_command := $(libmesh_F77)

# If $(libmesh_f77) is an mpiXXX compiler script, use -show
# to determine the base compiler
ifneq (,$(findstring mpi,$(mpif77_command)))
	mpif77_command := $(shell $(libmesh_F77) -show)
endif

# Set certain flags based on compiler

# ifort
ifneq (,$(findstring ifort,$(mpif77_command)))
	libmesh_FFLAGS += -r8
endif

# gfortran
ifneq (,$(findstring gfortran,$(mpif77_command)))
	libmesh_FFLAGS += -fdefault-real-8
endif

# g95
ifneq (,$(findstring g95,$(mpif77_command)))
	libmesh_FFLAGS += -r8
endif

ifeq ($(coverage),true)
	ifneq (,$(findstring gcc,$(GXX-VERSION)))
		libmesh_CXXFLAGS += --coverage
		libmesh_LDFLAGS += --coverage
	endif
endif

##############################################################################
######################### Application Variables ##############################
##############################################################################
#
# source files
moose_src	:= $(wildcard src/*.C) $(wildcard src/*/*.C)
srcfiles 	:= $(moose_src) $(wildcard src/utils/fparser/*.C)
fsrcfiles       := $(wildcard src/*/*.f)
f90srcfiles	:= $(wildcard src/*/*.f90)

#
# object files
objects		:= $(patsubst %.C, %.$(obj-suffix), $(srcfiles))
fobjects        := $(patsubst %.f, %.$(obj-suffix), $(fsrcfiles))
f90objects	:= $(patsubst %.f90, %.$(obj-suffix), $(f90srcfiles))

#
# header files
app_DIRS	+= $(shell find . -type d | grep -v .svn)
libmesh_INCLUDE += -Iinclude $(foreach i, $(app_DIRS), -I$(i)) $(ADDITIONAL_INCLUDES)

.PHONY: clean doc 

###############################################################################
# Target:
#
ifeq ($(MAKE_LIBRARY),yes)
APPLICATION_NAME := lib$(APPLICATION_NAME)
target := $(CURR_DIR)/$(APPLICATION_NAME)-$(METHOD)$(static_libext)

ifeq ($(enable-shared),yes)
	target := $(CURR_DIR)/$(APPLICATION_NAME)-$(METHOD)$(shared_libext)
endif
else
target	:= ./$(APPLICATION_NAME)-$(METHOD)
endif

###############################################################################
# Build Rules:
#
all:: $(target)

ifeq ($(MAKE_LIBRARY),yes)
ifeq ($(enable-shared),yes)
# Build dynamic library
$(target): $(objects)
	@echo "Linking "$@"..."
	@$(libmesh_CC) $(libmesh_CXXSHAREDFLAG) -o $@ $(objects) $(libmesh_LDFLAGS)
else
# Build static library
ifeq ($(findstring darwin,$(hostos)),darwin)
$(target): $(objects)
	@echo "Linking "$@"..."
	@libtool -static -o $@ $(objects)
else
$(target): $(objects)
	@echo "Linking "$@"..."
	@$(AR) rv $@ $(objects)
endif
endif
else

# Normal Executable
$(target): $(fobjects) $(f90objects) $(objects) $(moose_LIB) $(elk_LIB) $(mesh_library)
	@echo "Linking "$@"..."
	@$(libmesh_CXX) $(libmesh_CXXFLAGS) $(objects) $(fobjects) $(f90objects) -o $@ $(libmesh_LIBS) $(libmesh_LDFLAGS) $(ADDITIONAL_LIBS)

endif


doc:
	doxygen doc/Doxyfile

clean::
	@rm -f $(APPLICATION_NAME)-*
	@find . -name "*~" -or -name "*.o" -or -name "*.d" | xargs rm

syntax:
	python scripts/generate_input_syntax.py
#
# Dependencies
#

# include the dependency list
-include */*.d
-include */*/*.d
-include */*/*/*.d

