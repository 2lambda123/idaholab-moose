[Tests]
  [./newton_iteration]
    # Test the ability to compute material properties in an iterative manner
    # Solves f(x) = x*x for x: f(x)= 0, so x = 0
    type = 'Exodiff'
    input = 'recompute.i'
    exodiff = 'recompute_out.e'
  [../]

  [./newton_iteration2]
    # Test the ability to compute material properties in an iterative manner
    # Solves f(x) = x*x - 3 for x: f(x)= 0, so x = sqrt(3)
    type = 'Exodiff'
    input = 'recompute2.i'
    exodiff = 'recompute2_out.e'
  [../]

  [./newton_no_calc]
    # Test that no calculations are performed if computeProperties is not called explicitly on DiscreteMaterial
    type = 'Exodiff'
    input = 'recompute_no_calc.i'
    exodiff = 'recompute_no_calc_out.e'
  [../]

  [./newton_error]
    # Test error message when trying to get a non DiscreteMaterial object
    type = 'RunException'
    input = 'recompute_error.i'
    expect_err = 'Unable to locate active object: recompute_props.'
  [../]

  [./block_incompatible]
    # Test error message when blocks are incompatible
    type = RunException
    input = recompute_block_error.i
    expect_err = "The DiscreteMaterial object 'recompute_props' is defined on blocks that are incompatible with the retrieving object 'newton':\n\s*recompute_props\s0\n\s*newton\s0\s10"
  [../]

  [./boundary_incompatible]
    # Test error message when boundary are incompatible
    type = RunException
    input = recompute_boundary_error.i
    expect_err = "The DiscreteMaterial object 'recompute_props' is defined on boundaries that are incompatible with the retrieving object 'newton':\n\s*recompute_props\s3\n\s*newton\s1\s3"
  [../]
[]
