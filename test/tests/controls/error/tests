[Tests]
  [./tokenize_error]
    # Test that an invalid name errors
    type = 'RunException'
    input = 'tokenize_error.i'
    expect_err = "The desired controlable parameter 'Kernels/group/group/name' does not match the expected naming convection."
    match_literal = true
  [../]

  [./multiple_params_found]
    # Test error message when single parameter is requested, but multiple exist
    type = RunException
    input = 'multiple_parameters_found.i'
    expect_err = "The controlled parameter, 'coef', in Controls/func_control was found in multiple objects"
    match_literal = true
  [../]

  [./private_param_found]
    # Test error message when single parameter is requested, but is private
    type = RunException
    input = 'private_error.i'
    expect_err = "The controlled parameter, 'Kernels/diff/_test_private_param', in Controls/test_control is a private parameter of Kernels/diff"
    match_literal = true
  [../]

  [./no_param_found]
    # Test that an invalid parameter name errors properly
    type = 'RunException'
    input = 'no_parameter_found.i'
    expect_err = "The controlled parameter, 'unknown_param_name', in Controls/func_control was not found."
    match_literal = true
  [../]

  [./non_controlable_type]
    # Test that an invalid parameter name errors properly
    type = 'RunException'
    input = 'non_controlable_type_error.i'
    expect_err = "The controlled parameter, 'Kernels/diff/variable', in Controls/test_control is not a controlable type."
    match_literal = true
  [../]
[]
